---
import i18next from "@/i18n/config.js"
import { supabase } from "@/lib/supabase"
interface FlatsProps {
	name: string
	imageSrc: string
	flat_id: string
}

const { name, imageSrc, flat_id } = Astro.props as FlatsProps

// Obtener flats y rooms desde Supabase
const [{ data: flats, error: flatsError }, { data: rooms, error: roomsError }] = await Promise.all([
	supabase.from("flats").select("*"),
	supabase.from("rooms").select("*"),
])

if (flatsError || roomsError) {
	console.error("Error al obtener datos desde Supabase:", flatsError || roomsError)
}

// Función para obtener cuartos disponibles por flat
function getAvailableRoomsByFlat() {
	return (flats || []).map((flat) => {
		const roomsInFlat = (rooms || []).filter((room) => room.roomFlat === flat.flat_id)
		const availableRooms = roomsInFlat.filter((room) => room.status === "available").length
		const comingSoon = roomsInFlat.filter((room) => room.status === "soon").length
		return {
			flat: flat.title,
			flat_id: flat.flat_id,
			availableRooms,
			comingSoon,
			totalRooms: roomsInFlat.length,
		}
	})
}

// Buscar datos del piso actual
const flatData = getAvailableRoomsByFlat().find((flat) => flat.flat_id === flat_id) || {
	availableRooms: 0,
	comingSoon: 0,
	totalRooms: 0,
}
const { availableRooms, comingSoon, totalRooms } = flatData

const lang = Astro.url.pathname.split("/")[1] || "es" // 'es' por defecto si no hay idioma en la URL
const translations = i18next.getResourceBundle(lang, "translation")
const bannerCookies = translations.bannerCookies
const gridFlats = translations.GridFlats
---

<div
	id={flat_id}
	class="grid grid-cols-1 gap-6 rounded-lg border border-gray-200 bg-white p-4 shadow-sm md:grid-cols-4 md:grid-rows-[auto,1fr,auto]"
>
	<!-- Contenido arriba en mobile, derecha en desktop -->
	<div
		class="order-1 flex flex-col items-center justify-center text-center md:order-2 md:col-span-2 md:col-start-3"
	>
		<h2 class="w-full text-xl font-semibold text-gray-900">{name}</h2>
		<p class="mt-2 w-full text-left text-gray-600">
			{gridFlats[flat_id].description}
		</p>
		{
			gridFlats[flat_id]?.title1 && gridFlats[flat_id]?.text1?.length > 0 && (
				<div class="mt-4 w-full text-left">
					<strong class="font-semibold text-gray-900 underline">{gridFlats[flat_id].title1}</strong>
					<ul class="list-disc pl-4 text-gray-600">
						{gridFlats[flat_id].text1.map((detail: string) => (
							<li>{detail}</li>
						))}
					</ul>
				</div>
			)
		}
		{
			gridFlats[flat_id]?.title2 && gridFlats[flat_id]?.text2?.length > 0 && (
				<div class="mt-4 w-full text-left">
					<strong class="font-semibold text-gray-900 underline">{gridFlats[flat_id].title2}</strong>
					<ul class="list-disc pl-4 text-gray-600">
						{gridFlats[flat_id].text2.map((detail: string) => (
							<li>{detail}</li>
						))}
					</ul>
				</div>
			)
		}
		{
			gridFlats[flat_id]?.title3 && gridFlats[flat_id]?.text3?.length > 0 && (
				<div class="mt-4 w-full text-left">
					<strong class="font-semibold text-gray-900 underline">{gridFlats[flat_id].title3}</strong>
					<ul class="list-disc pl-4 text-gray-600">
						{gridFlats[flat_id].text3.map((detail: string) => (
							<li>{detail}</li>
						))}
					</ul>
				</div>
			)
		}
	</div>

	<!-- Mapa abajo en mobile, izquierda en desktop y centrado -->
	<div class="order-2 flex items-center justify-center md:order-1 md:col-span-2">
		<div
			id={"map-container-" + flat_id}
			data-map-image={imageSrc}
			class="flex h-96 w-full items-center justify-center rounded-lg bg-gray-100"
		>
			<p class="text-center font-medium text-gray-600">
				{bannerCookies.textGoogleMaps}
			</p>
		</div>
	</div>

	<!-- Texto centrado abajo (siempre debajo de la card) -->
	<div class="order-3 col-span-1 flex items-center justify-center text-center md:col-span-4">
		{
			availableRooms > 0 || comingSoon > 0 ? (
				<a
					class={`font-medium ${availableRooms > 0 ? "text-blue-600" : "text-orange-600"}`}
					href={`/${lang}/Rooms?selectedFlat=${flat_id}`}
				>
					{availableRooms > 0 && `${gridFlats.RoomsAvailable}: ${availableRooms}/${totalRooms}`}
					{availableRooms > 0 && comingSoon > 0 && " · "}
					{comingSoon > 0 && `${gridFlats.ComingSoon}: ${comingSoon}`}
				</a>
			) : (
				<span class="font-medium text-red-600">{gridFlats.soldOut}</span>
			)
		}
	</div>
</div>

<!-- Script para gestionar el mapa basado en cookies -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const cookiesAccepted = localStorage.getItem("cookiesAccepted") === "true"

		// Buscar todos los contenedores de mapas
		document.querySelectorAll("[id^='map-container']").forEach((mapContainer) => {
			const mapImage = mapContainer.getAttribute("data-map-image") // Obtener URL del mapa desde data attribute

			if (cookiesAccepted) {
				mapContainer.innerHTML = `<iframe src="${mapImage}" class="h-96 w-full rounded-lg" loading="lazy"></iframe>`
			}
		})
	})
</script>
