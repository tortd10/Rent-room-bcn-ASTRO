---
// Importa los tipos necesarios para los props
interface Props {
	imagePaths: string[] // Rutas de las imágenes
	initialAlt: string // Texto alternativo inicial
}

// Destructura las props que se reciben en el componente
const { imagePaths, initialAlt } = Astro.props as Props
---

<div class="flex flex-col items-center space-y-4">
	<!-- Foto principal con áreas clicables -->
	<div class="relative h-[570px] w-full max-w-[30rem]">
		<img
			id="main-image"
			src={imagePaths[0]}
			alt={initialAlt || "Imagen principal"}
			class="relative h-full w-full cursor-pointer snap-center rounded-[16px] bg-black bg-[length:100%] bg-center transition-[background-size] hover:bg-[length:105%]"
		/>
		<!-- Área izquierda para imagen anterior -->
		<div
			id="prev-area"
			class="absolute left-0 top-0 h-full w-1/3 cursor-pointer bg-transparent"
			aria-label="Imagen anterior"
		>
		</div>
		<!-- Área derecha para imagen siguiente -->
		<div
			id="next-area"
			class="absolute right-0 top-0 h-full w-1/3 cursor-pointer bg-transparent"
			aria-label="Imagen siguiente"
		>
		</div>
	</div>

	<!-- Miniaturas -->
	<div id="thumbnails-container" class="grid grid-cols-3 gap-2 sm:grid-cols-4 lg:grid-cols-6">
		{
			imagePaths.map((image, index) => (
				<img
					src={image}
					alt={`Miniatura ${index + 1}`}
					class={`h-20 w-20 cursor-pointer rounded-md border-2 ${
						index === 0 ? "border-primary" : "border-transparent"
					} object-cover hover:border-primary`}
					data-image={image}
					data-alt={`Miniatura ${index + 1}`}
					role="button"
					tabindex="0"
					aria-selected={index === 0 ? "true" : "false"}
					loading="lazy"
				/>
			))
		}
	</div>
</div>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const mainImage = document.getElementById("main-image") as HTMLImageElement | null
		const thumbnails = document.querySelectorAll("img[data-image]") as NodeListOf<HTMLImageElement>
		const prevArea = document.getElementById("prev-area")
		const nextArea = document.getElementById("next-area")
		let currentIndex = 0

		// Función para actualizar la imagen principal
		const updateMainImage = (index: number) => {
			const thumbnail = thumbnails[index]
			if (!thumbnail) return

			const newImage = thumbnail.getAttribute("data-image")
			const newAlt = thumbnail.getAttribute("data-alt")

			// Actualizar imagen principal
			if (mainImage && newImage && newAlt) {
				mainImage.src = newImage
				mainImage.alt = newAlt
			}

			// Actualizar clases y aria-selected
			thumbnails.forEach((thumb, i) => {
				thumb.setAttribute("aria-selected", i === index ? "true" : "false")
				thumb.classList.toggle("border-primary", i === index)
				thumb.classList.toggle("border-transparent", i !== index)
			})

			currentIndex = index
		}

		// Navegación con teclado
		const handleKeyNavigation = (event: KeyboardEvent) => {
			if (event.key === "ArrowRight") {
				const nextIndex = (currentIndex + 1) % thumbnails.length
				updateMainImage(nextIndex)
			} else if (event.key === "ArrowLeft") {
				const prevIndex = (currentIndex - 1 + thumbnails.length) % thumbnails.length
				updateMainImage(prevIndex)
			}
		}

		// Navegación por clic en bordes
		const handleAreaClick = (direction: "prev" | "next") => {
			if (direction === "next") {
				const nextIndex = (currentIndex + 1) % thumbnails.length
				updateMainImage(nextIndex)
			} else if (direction === "prev") {
				const prevIndex = (currentIndex - 1 + thumbnails.length) % thumbnails.length
				updateMainImage(prevIndex)
			}
		}

		// Agregar eventos
		thumbnails.forEach((thumbnail, index) => {
			thumbnail.addEventListener("click", () => updateMainImage(index))

			thumbnail.addEventListener("keydown", (event: KeyboardEvent) => {
				if (event.key === "Enter" || event.key === " ") {
					event.preventDefault()
					updateMainImage(index)
				}
			})
		})

		document.addEventListener("keydown", handleKeyNavigation)

		prevArea?.addEventListener("click", () => handleAreaClick("prev"))
		nextArea?.addEventListener("click", () => handleAreaClick("next"))
	})
</script>
