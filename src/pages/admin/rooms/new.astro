---
import SectionContainer from "@/components/SectionContainer.astro"
import LayoutAdmin from "@/layouts/LayoutAdmin.astro"
import RoomForm from "@/components/admin/RoomForm.astro"
import { getAvailableFlats, createRoom } from "@/db/api/rooms"
import type { Flat } from "@/types"

const { user } = Astro.locals
if (!user) return Astro.redirect("/admin")

let errors: { name?: string; flat_id?: string; general?: string } = {}
let successMessage = ""

// Obtener pisos disponibles
const { data: flatsData, error: flatsError } = await getAvailableFlats()
const flats: Flat[] = flatsData || []

if (flatsError) {
  errors.general = "Error al cargar la lista de pisos"
  console.error("Error al obtener pisos:", flatsError)
}

// Procesar formulario
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData()
  
  // Convertir FormData a objeto
  const formValues = Object.fromEntries(formData.entries())
  
  // Preparar datos para creación
  const newRoom = {
    name: formValues.name.toString().trim(),
    slug: formValues.slug.toString().trim(),
    flat_id: formValues.flat_id.toString(),
    available: formValues.available === "on",
    status: "available" as const,
    imageSrc: formValues.imageSrc?.toString().trim(),
    imageAlt: formValues.imageAlt?.toString().trim(),
  }

  // Validación
  if (!newRoom.name) errors.name = "El nombre es requerido"
  if (!newRoom.flat_id) errors.flat_id = "Debe seleccionar un piso"

  if (Object.keys(errors).length === 0) {
    const { data: createdRoom, error } = await createRoom(newRoom)
    
    if (error) {
      console.error("Error detallado:", error)
      errors.general = error.details || error.message || "Error al guardar. Por favor intente nuevamente."
      
      // Manejo específico de errores conocidos
      if (error.code === '23503') { // Violación de clave foránea
        errors.flat_id = "El piso seleccionado no existe"
      }
    } else {
      // Redirección con mensaje de éxito
	  return Astro.redirect(
	  `/admin/rooms?success=${encodeURIComponent(`Habitación ${createdRoom!.name} creada correctamente`)}`
	  )
	}
  }
}
---

<LayoutAdmin title="Nueva Habitación">
  <SectionContainer>
    <div class="p-6 space-y-6">
      <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-800">Nueva Habitación</h1>
        <a href="/admin/rooms" class="btn-secondary">
          ← Volver al listado
        </a>
      </div>

      {/* Mostrar errores generales */}
      {errors.general && (
        <div class="rounded-md bg-red-50 p-4 mb-4">
          <div class="flex items-start">
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">Error</h3>
              <div class="mt-2 text-sm text-red-700">
                <p>{errors.general}</p>
                {errors.general.includes('violates foreign key constraint') && (
                  <p class="mt-1">Por favor verifique el piso seleccionado</p>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      <div class="bg-white shadow rounded-lg overflow-hidden border border-gray-200">
        <RoomForm 
          flats={flats}
          action={`/admin/rooms/new`}
          method="POST"
        />
      </div>
    </div>
  </SectionContainer>
</LayoutAdmin>

<style is:global>
  .btn-secondary {
    @apply inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500;
  }
</style>